using AutoMapper;
using LMT.Api.Data;
using LMT.Api.DTOs;
using LMT.Api.Entities;
using LMT.Api.ExceptionHandling;
using LMT.Api.Interfaces;
using MailKit.Net.Smtp;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using MimeKit;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

namespace LMT.Api.Services
{
    public class AuthService : IAuthService
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly RoleManager<IdentityRole> _roleManager;
        private readonly IConfiguration _configuration;
        private readonly AppDBContext _dbContext;
        private readonly EFDBContext _efdbContext;
        private readonly IMapper _mapper;

        public AuthService(UserManager<ApplicationUser> userManager
                       , SignInManager<ApplicationUser> signInManager
                       , RoleManager<IdentityRole> roleManager
                       , IConfiguration configuration
                       , AppDBContext dbContext
                       , EFDBContext efdbContext
                       , IMapper mapper)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _roleManager = roleManager;
            _configuration = configuration;
            _dbContext = dbContext;
            _efdbContext = efdbContext;
            _mapper = mapper;
        }

        public async Task<string> RegisterAsync(RegisterRequest registerRequest)
        {
            var user = new ApplicationUser
            {
                UserFullName = registerRequest.Username,
                UserName = registerRequest.Username.Split(' ').First().ToLower(),
                Email = registerRequest.Email,
                PhoneNumber = registerRequest.PhoneNumber,
                PhoneNumberConfirmed = true,
                District_Id = registerRequest.District_Id,
            };

            var autoGeneratedPassword = GenerateRandomPassword(8);

            var result = await _userManager.CreateAsync(user, autoGeneratedPassword);

            if (!result.Succeeded)
            {
                throw new Exception("Registration failed");
            }

            if (!await _roleManager.RoleExistsAsync("FIELD_OFFICER"))
            {
                await _roleManager.CreateAsync(new IdentityRole("FIELD_OFFICER"));
            }

            await _userManager.AddToRoleAsync(user, "FIELD_OFFICER");

            var _user = await _userManager.FindByEmailAsync(registerRequest.Email);
            var emailCode = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            bool sendLoginDetailsEmail = await SendLoginDetailsEmailAsync(user,autoGeneratedPassword);
            bool sendVerificationCodeEmail = await SendVerificationCodeEmailAsync(user, emailCode);
            if (!sendLoginDetailsEmail && !sendVerificationCodeEmail)
            {
                
                await _userManager.RemoveFromRoleAsync(user, "FIELD_OFFICER");
                await _userManager.DeleteAsync(user);

                throw new Exception("Failed to send verification code. Please register again.");
            }

            return $"Field officer has been registered successfully. Confirmation code has been sent to {user.Email}.";
        }
        private string GenerateRandomPassword(int length)
        {
            const string lowerCase = "abcdefghijklmnopqrstuvwxyz";
            const string upperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const string digits = "1234567890";
            const string specialChars = "!@#$%^&*()";
            const string allValidChars = lowerCase + upperCase + digits + specialChars;

            StringBuilder password = new StringBuilder();
            using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
            {
                // Ensure at least one of each required character type
                password.Append(lowerCase[GetRandomIndex(lowerCase.Length, rng)]);
                password.Append(upperCase[GetRandomIndex(upperCase.Length, rng)]);
                password.Append(digits[GetRandomIndex(digits.Length, rng)]);
                password.Append(specialChars[GetRandomIndex(specialChars.Length, rng)]);

                // Fill the rest of the password length with random valid characters
                for (int i = 4; i < length; i++)
                {
                    password.Append(allValidChars[GetRandomIndex(allValidChars.Length, rng)]);
                }
            }

            // Shuffle the password to avoid predictable patterns (e.g., lowercase always first, etc.)
            return ShufflePassword(password.ToString());
        }

        private int GetRandomIndex(int max, RandomNumberGenerator rng)
        {
            byte[] randomNumber = new byte[4];  // 4 bytes for 32-bit random number
            rng.GetBytes(randomNumber);
            uint randomValue = BitConverter.ToUInt32(randomNumber, 0);  // Get a 32-bit unsigned integer
            return (int)(randomValue % (uint)max);  // Cast to int after applying modulo
        }

        private string ShufflePassword(string password)
        {
            char[] array = password.ToCharArray();
            Random rng = new Random();
            int n = array.Length;
            while (n > 1)
            {
                n--;
                int k = rng.Next(n + 1);
                var value = array[k];
                array[k] = array[n];
                array[n] = value;
            }
            return new string(array);
        }

        public async Task<bool> SendLoginDetailsEmailAsync(ApplicationUser user, string autoGeneratedPassword)
        {
            StringBuilder emailBodyBuilder = new StringBuilder();

            emailBodyBuilder.AppendLine("<html>");
            emailBodyBuilder.AppendLine("<body>");

            emailBodyBuilder.AppendLine($"<p>Hello {user.UserFullName},</p>");
            emailBodyBuilder.AppendLine("<p>Welcome to the Labour Management System, Government of Sikkim.</p>");

            // Account creation success message
            emailBodyBuilder.AppendLine("<p>Your account has been created successfully.</p>");

            // Login details section
            emailBodyBuilder.AppendLine("<p><strong>Login details:</strong></p>");
            emailBodyBuilder.AppendLine($"<p>Username: {user.Email} or {user.UserName}</p>");
            emailBodyBuilder.AppendLine($"<p>Password: {autoGeneratedPassword}</p>");

            emailBodyBuilder.AppendLine("<p>Please use these credentials to log in to the LMS app.</p>");

            // Footer
            emailBodyBuilder.AppendLine("<p>Best regards,<br>Labour Department<br>Sokaythang, Gangtok, Sikkim<br>Government of Sikkim</p>");

            emailBodyBuilder.AppendLine("</body>");
            emailBodyBuilder.AppendLine("</html>");

            string message = emailBodyBuilder.ToString();
            var _email = new MimeMessage();
            _email.To.Add(MailboxAddress.Parse(user.Email));
            _email.From.Add(MailboxAddress.Parse(_configuration["EmailSettings:SenderEmail"]));
            _email.Subject = "Login Details";
            _email.Body = new TextPart(MimeKit.Text.TextFormat.Html) { Text = message };

            using var smtp = new SmtpClient();
            await smtp.ConnectAsync(_configuration["EmailSettings:SmtpServer"], int.Parse(_configuration["EmailSettings:SmtpPort"]!), MailKit.Security.SecureSocketOptions.StartTls);
            await smtp.AuthenticateAsync(_configuration["EmailSettings:UserName"], _configuration["EmailSettings:Password"]);
            await smtp.SendAsync(_email);
            await smtp.DisconnectAsync(true);

            return true;
        }
        public async Task<bool> SendVerificationCodeEmailAsync(ApplicationUser user, string emailCode)
        {
            StringBuilder emailBodyBuilder = new StringBuilder();

            emailBodyBuilder.AppendLine("<html>");
            emailBodyBuilder.AppendLine("<body>");

            emailBodyBuilder.AppendLine($"<p>Hello {user.UserFullName},</p>");
            emailBodyBuilder.AppendLine("<p>Welcome to the Labour Management System, Government of Sikkim.</p>");

            // Verification code details
            emailBodyBuilder.AppendLine("<p>To verify your account, please enter the following 6-digit code in the LMS app:</p>");
            emailBodyBuilder.AppendLine($"<h3><strong>Verification Code: {emailCode}</strong></h3>");
            emailBodyBuilder.AppendLine("<p>Please note that this code is valid for 60 minutes from the time it was generated.</p>");

            // Expiry instructions
            emailBodyBuilder.AppendLine("<p>If the verification code expires, please contact the admin to resend the verification code.</p>");

            // Footer
            emailBodyBuilder.AppendLine("<p>If you did not request this verification, please ignore this email or contact support.</p>");
            emailBodyBuilder.AppendLine("<p>Best regards,<br>Labour Department<br>Sokaythang, Gangtok, Sikkim<br>Government of Sikkim</p>");

            emailBodyBuilder.AppendLine("</body>");
            emailBodyBuilder.AppendLine("</html>");

            string message = emailBodyBuilder.ToString();
            var _email = new MimeMessage();
            _email.To.Add(MailboxAddress.Parse(user.Email));
            _email.From.Add(MailboxAddress.Parse(_configuration["EmailSettings:SenderEmail"]));
            _email.Subject = "Email Verification Code";
            _email.Body = new TextPart(MimeKit.Text.TextFormat.Html) { Text = message };

            using var smtp = new SmtpClient();
            await smtp.ConnectAsync(_configuration["EmailSettings:SmtpServer"], int.Parse(_configuration["EmailSettings:SmtpPort"]!), MailKit.Security.SecureSocketOptions.StartTls);
            await smtp.AuthenticateAsync(_configuration["EmailSettings:UserName"], _configuration["EmailSettings:Password"]);
            await smtp.SendAsync(_email);
            await smtp.DisconnectAsync(true);

            return true;
        }
        public async Task<TokenResponse> AuthenticateUserAsync(LoginRequest loginRequest)
        {
            var user = await _userManager.FindByNameAsync(loginRequest.Username)
                ?? await _userManager.FindByEmailAsync(loginRequest.Username);
         
            if (user == null) 
                throw new Exception("User not found");

            bool isEmailConfirmed = await _userManager.IsEmailConfirmedAsync(user);
            if (!isEmailConfirmed)
                throw new EmailNotConfirmedException("Email not confirmed. Please verify your email.");

            if (!await _userManager.CheckPasswordAsync(user, loginRequest.Password))
                throw new UnauthorizedAccessException("Invalid credentials");

            var authClaims = await GenerateClaimsAsync(user);
            var token = GenerateJwtToken(authClaims);
            var refreshToken = GenerateRefreshToken();

            var userRoles = await _userManager.GetRolesAsync(user);

            if (!int.TryParse(_configuration["JWT:RefreshTokenValidityInDays"], out int refreshTokenValidityInDays))
            {
                throw new UnauthorizedAccessException("Invalid RefreshToken");
            }

            await StoreRefreshTokenAsync(user.Id, refreshToken, refreshTokenValidityInDays);


            return new TokenResponse
            {
                AccessToken = new JwtSecurityTokenHandler().WriteToken(token),
                RefreshToken = refreshToken,
                role = userRoles,
                expiration = token.ValidTo,
                profileName = user.UserName,
                email = user.Email,
                userName = user.UserName,
                userId = user.Id,
                phonenumber = user.PhoneNumber
            };
        }
        private async Task StoreRefreshTokenAsync(string userId, string refreshToken, int refreshTokenValidityInDays)
        {
            var refreshTokenModel = new RefreshToken
            {
                Token = refreshToken,
                UserId = userId,
                ExpiryDate = DateTime.UtcNow.AddDays(refreshTokenValidityInDays),
                IsRevoked = false
            };

            _dbContext.RefreshTokens.Add(refreshTokenModel);
            await _dbContext.SaveChangesAsync();
        }
        private async Task<List<Claim>> GenerateClaimsAsync(ApplicationUser user)
        {
            var userRoles = await _userManager.GetRolesAsync(user);
            var authClaims = new List<Claim>
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.UserName!),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                new Claim(ClaimTypes.Name, user.UserName!),
                new Claim(ClaimTypes.NameIdentifier, user.Id)
            };

            foreach (var userRole in userRoles)
            {
                authClaims.Add(new Claim(ClaimTypes.Role, userRole));
            }

            return authClaims;
        }
        private JwtSecurityToken GenerateJwtToken(List<Claim> claims)
        {
            var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JWT:Key"]!));

            return new JwtSecurityToken(
                issuer: _configuration["JWT:Issuer"],
                audience: _configuration["JWT:Audience"],
                expires: DateTime.Now.AddMinutes(int.Parse(_configuration["JWT:TokenValidityInMinutes"]!)),
                claims: claims,
                signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)
            );
        }
        private static string GenerateRefreshToken()
        {
            var randomNumber = new byte[64];
            using var rng = RandomNumberGenerator.Create();
            rng.GetBytes(randomNumber);
            return Convert.ToBase64String(randomNumber);
        }
        public async Task<TokenResponse> RefreshToken(TokenModel tokenModel)
        {
            if (tokenModel is null)
            {
                throw new BadHttpRequestException($"Token not found.", StatusCodes.Status400BadRequest);
            }
            var principal = GetPrincipalFromExpiredToken(tokenModel.AccessToken!);
            if (principal == null)
            {
                throw new BadHttpRequestException($"Invalid access token.", StatusCodes.Status401Unauthorized);
            }
            var user = await _userManager.FindByNameAsync(principal.Identity!.Name);

            var oldRefreshToken = await _dbContext.RefreshTokens.FirstOrDefaultAsync(rt => rt.Token == tokenModel.RefreshToken);
            if (oldRefreshToken == null || oldRefreshToken.UserId != user.Id || oldRefreshToken.ExpiryDate <= DateTime.Now || oldRefreshToken.IsRevoked)
            {
                throw new BadHttpRequestException($"Invalid or expired refresh token.", StatusCodes.Status401Unauthorized);
            }

            var newAccessToken = GenerateJwtToken(principal.Claims.ToList());
            var newRefreshToken = GenerateRefreshToken();

            oldRefreshToken.IsRevoked = true; // Revoke the old refresh token
            _dbContext.RefreshTokens.Update(oldRefreshToken);

            var newRefreshTokenModel = new RefreshToken
            {
                Token = newRefreshToken,
                UserId = user.Id,
                ExpiryDate = DateTime.UtcNow.AddDays(int.Parse(_configuration["JWT:RefreshTokenValidityInDays"]!)),
                IsRevoked = false
            };
            _dbContext.RefreshTokens.Add(newRefreshTokenModel);
            await _dbContext.SaveChangesAsync();

            return new TokenResponse
            {
                AccessToken = new JwtSecurityTokenHandler().WriteToken(newAccessToken),
                RefreshToken = newRefreshToken
            };
        }
        public async Task RevokeAsync(string refreshToken)
        {
            var token = await _dbContext.RefreshTokens.FirstOrDefaultAsync(t => t.Token == refreshToken);
            if (token == null)
            {
                throw new Exception("Token not found");
            }

            token.IsRevoked = true;
            _dbContext.RefreshTokens.Update(token);
            await _dbContext.SaveChangesAsync();
        }
        public async Task RevokeAllAsync()
        {
            var refreshTokens = await _dbContext.RefreshTokens.ToListAsync();
            foreach (var refreshToken in refreshTokens)
            {
                refreshToken.IsRevoked = true;
            }
            _dbContext.RefreshTokens.UpdateRange(refreshTokens);
            await _dbContext.SaveChangesAsync();
        }
        private ClaimsPrincipal? GetPrincipalFromExpiredToken(string token)
        {
            var tokenValidationParameters = new TokenValidationParameters
            {
                ValidateAudience = false,
                ValidateIssuer = false,
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JWT:Key"]!)),
                ValidateLifetime = false
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            var principal = tokenHandler.ValidateToken(token, tokenValidationParameters, out SecurityToken securityToken);
            if (securityToken is not JwtSecurityToken jwtSecurityToken || !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase))
                throw new SecurityTokenException("Invalid token");

            return principal;
        }
        public async Task<bool> ChangePasswordAsync(ChangePasswordRequest changePasswordRequest)
        {
            var user = await _userManager.FindByIdAsync(changePasswordRequest.UserId);
            if (user == null)
            {
                return false;
            }
            var result = await _userManager.ChangePasswordAsync(user, changePasswordRequest.CurrentPassword, changePasswordRequest.NewPassword);
            return result.Succeeded;
        }
        public async Task ResetPasswordAsync(ResetPasswordRequest resetPasswordRequest)
        {
            var user = await _userManager.FindByEmailAsync(resetPasswordRequest.Email);
            if (user == null) throw new Exception("Invalid Details");

            var result = await _userManager.ResetPasswordAsync(user, resetPasswordRequest.Token, resetPasswordRequest.NewPassword);

            if (!result.Succeeded)
                throw new Exception("Invalid or expired token");
        }
        public async Task<bool> ForgotPasswordAsync(string email)
        {
            var user = await _userManager.FindByEmailAsync(email);
            if (user == null)
                throw new Exception("Email not found");

            var token = await _userManager.GeneratePasswordResetTokenAsync(user);

            bool result = await SendResetEmailAsync(user, token);
            if (result) { return true; } else { return false; }
        }
        private async Task<bool> SendResetEmailAsync(ApplicationUser user, string resetToken)
        {
            try
            {
                var emailBody = new StringBuilder();

                emailBody.AppendLine("<html>");
                emailBody.AppendLine("<body>");
                emailBody.AppendLine($"<p>Hello {user.UserName},</p>");
                emailBody.AppendLine("<p>You have requested to reset your password. Use the following verification code to reset your password:</p>");
                emailBody.AppendLine($"<h3><strong>Verification Code: {resetToken}</strong></h3>");
                emailBody.AppendLine("<p>Please note that this code is valid for 60 minutes from the time it was generated.</p>");
                emailBody.AppendLine("<p>If you did not request this reset, please ignore this email.</p>");
                emailBody.AppendLine("<p>Best regards,<br>Labour Department<br>Sokaythang, Gangtok, Sikkim<br>Government of Sikkim</p>");
                emailBody.AppendLine("</body>");
                emailBody.AppendLine("</html>");

                string message = emailBody.ToString();
                var _email = new MimeMessage();
                _email.To.Add(MailboxAddress.Parse(user.Email));
                _email.From.Add(MailboxAddress.Parse(_configuration["EmailSettings:SenderEmail"]));
                _email.Subject = "Password Reset Request";
                _email.Body = new TextPart(MimeKit.Text.TextFormat.Html) { Text = message };

                using var smtp = new SmtpClient();
                await smtp.ConnectAsync(_configuration["EmailSettings:SmtpServer"], int.Parse(_configuration["EmailSettings:SmtpPort"]!), MailKit.Security.SecureSocketOptions.StartTls);
                await smtp.AuthenticateAsync(_configuration["EmailSettings:UserName"], _configuration["EmailSettings:Password"]);
                await smtp.SendAsync(_email);
                await smtp.DisconnectAsync(true);

                return true;
            }
            catch (Exception)
            {
                return false;
            }
          
        }
        public async Task<List<UserListDTO>> GetUserListAsync()
        {
            var users = await _dbContext.Users.ToListAsync(); // Assuming your DbContext has a DbSet<ApplicationUser> Users
            return _mapper.Map<List<UserListDTO>>(users);
        }
        public async Task<bool> DeleteUserAsync(string userId)
        {
            var user = await _userManager.FindByIdAsync(userId);
            if (user == null) { return false; }
            var userRoles = await _userManager.GetRolesAsync(user);
            if (userRoles.Any())
            {
                var result = await _userManager.RemoveFromRolesAsync(user, userRoles);
                if (!result.Succeeded)
                {
                    return false;
                }
            }
            var deleteResult = await _userManager.DeleteAsync(user);
            return deleteResult.Succeeded;
        }
        public async Task<ApplicationUser> GetUserByIdAsync(string userId)
        {
            return await _userManager.FindByIdAsync(userId) ?? throw new Exception("User not found"); 
        }
        public async Task<bool> EditUserAsync(ApplicationUser user)
        {
            var result = await _userManager.UpdateAsync(user);
            return result.Succeeded; 
        }
        public async Task AccountConfirmation(string email, int code)
        {
            var user = await _userManager.FindByEmailAsync(email);
            if (user == null) throw new Exception("Invalid Details");

            var result = await _userManager.ConfirmEmailAsync(user, code.ToString());
            if (!result.Succeeded) 
                throw new Exception("Invalid or expired token");
           
        }
        public async Task<IEnumerable<GetRegisteredFieldOfficersDTO>> GetRegisteredUsersListAsync(string userId)
        {
            var result = await _efdbContext.GetRegisteredFieldOfficersDTOs
            .FromSqlRaw("EXEC [dbo].[SP_GetRegisteredFieldOfficers] @AdminUserID = {0}", userId)
            .ToListAsync();
            return result;
        }
        public async Task<string> SendReAccountConfirmation(string email)
        {
            var _user = await _userManager.FindByEmailAsync(email);
            if (_user is null) throw new Exception("User not found.");
            var emailCode = await _userManager.GenerateEmailConfirmationTokenAsync(_user);
            bool sendEmail = await SendVerificationCodeEmailAsync(_user, emailCode);
            if (!sendEmail)
            {
                await _userManager.RemoveFromRoleAsync(_user, "FIELD_OFFICER");
                await _userManager.DeleteAsync(_user);

                throw new Exception("Failed to send verification code. Please register again.");
            }

            return $"Confirmation code has been sent to field officer official email {_user.Email}.";
        }
    }
}
